{"version":3,"file":"static/js/929.d57ae61b.chunk.js","mappings":"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","sources":["components/Playlists/Playlist.jsx"],"sourcesContent":["import Loading from '../../layouts/Loading';\r\nimport {apiUrl} from '../../services/api';\r\nimport { TbPlayerTrackPrevFilled, TbPlayerTrackNextFilled } from \"react-icons/tb\";\r\nimport { FaPlay, FaPause, FaTrash,FaArrowLeft } from \"react-icons/fa\";\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { Navigate,useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport default function Playlist() {\r\n  const [playlists, setPlaylists] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  // eslint-disable-next-line\r\n  const [currentPlaylistIndex, setCurrentPlaylistIndex] = useState(0);\r\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const audioRef = useRef(null);\r\n  const [ftBgColor, setFtBgColor] = useState(getRandomColor());\r\n  const [sdBgColor, setSdBgColor] = useState(getRandomColor());\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const getPlaylist = async () => {\r\n      const token = sessionStorage.getItem('token');\r\n      if (!token) {\r\n        Navigate('/login');\r\n        return;\r\n      }\r\n      try {\r\n        const response = await axios.get(apiUrl+'/playlist', {\r\n          headers: {\r\n            Authorization: `Token ${token}`\r\n          }\r\n        });\r\n        setPlaylists(response.data);\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    getPlaylist();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      isPlaying ? audioRef.current.play() : audioRef.current.pause();\r\n    }\r\n  }, [currentSongIndex, isPlaying]);\r\n\r\n  function getRandomColor(){\r\n    var letters = \"0123456789ABCDEF\";\r\n    var color = \"#\";\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  const handlePlayPause = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n    } else {\r\n      audioRef.current.play();\r\n    }\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    const nextIndex = (currentSongIndex + 1) % playlists[currentPlaylistIndex].songs.length;\r\n    setCurrentSongIndex(nextIndex);\r\n    setIsPlaying(true);\r\n    setFtBgColor(getRandomColor());\r\n    setSdBgColor(getRandomColor());\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    const prevIndex = (currentSongIndex - 1 + playlists[currentPlaylistIndex].songs.length) % playlists[currentPlaylistIndex].songs.length;\r\n    setCurrentSongIndex(prevIndex);\r\n    setIsPlaying(true);\r\n    setFtBgColor(getRandomColor());\r\n    setSdBgColor(getRandomColor());\r\n    \r\n  };\r\n\r\n  const deleteSongToPlaylist = async (playlistId, songId) => {\r\n    const token = sessionStorage.getItem(\"token\");\r\n    if (!token) {\r\n      navigate(\"/login\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      await axios.delete(`${apiUrl}/playlists/${playlistId}/songs/${songId}`, {\r\n        headers: {\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      });\r\n      alert(\"Song deleted from playlist\");\r\n      setPlaylists(prevPlaylists => \r\n        prevPlaylists.map(playlist => \r\n          playlist.id === playlistId \r\n          ? { ...playlist, songs: playlist.songs.filter(song => song.id !== songId) }\r\n          : playlist\r\n        )\r\n      );\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const deletePlaylist = async (playlistId) => {\r\n    const token = sessionStorage.getItem(\"token\");\r\n    if (!token) {\r\n      navigate(\"/login\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      await axios.delete(`${apiUrl}/playlist/${playlistId}/delete`, {\r\n        headers: {\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      });\r\n      alert(`Playlist Deleted Successfully👍${playlistId}`);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (playlists && playlists.length === 0) {\r\n      navigate('/createplaylist');\r\n    }\r\n  }, [playlists, navigate]);\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  }\r\n  if (!playlists) return <Loading />;\r\n\r\n  const currentPlaylist = playlists[currentPlaylistIndex];\r\n  if (!currentPlaylist || !currentPlaylist.songs || currentPlaylist.songs.length === 0) {\r\n    return;\r\n  }\r\n  const currentSong = currentPlaylist.songs[currentSongIndex];\r\n  \r\n  \r\n\r\n  const handleClick = (songId) => {\r\n    navigate(`/songs/${songId}/`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-900 py-8 px-4\">\r\n      <div className=\"container mx-auto space-y-8 flex flex-col justify-between min-h-screen\">\r\n        <div>\r\n          {playlists && playlists.length > 0 ?(\r\n            playlists.map((playlist) => (\r\n              <div\r\n                key={playlist.id}\r\n                className=\"bg-gray-800 rounded-lg shadow-lg p-6 hover:shadow-2xl transition-shadow duration-300 m-2\" style={{ background: `linear-gradient(to right, ${ftBgColor}, ${sdBgColor})` }}>\r\n                <FaTrash onClick={() => deletePlaylist(playlist.id)} size={20} className='cursor-pointer float-right hover:text-red-600'/>\r\n                <FaArrowLeft onClick={() => navigate(-1)} size={14} className='cursor-pointer'/>\r\n                <h2 className=\"text-3xl font-bold text-center text-white mb-6\">Your {playlist.songs.length} {playlist.name}</h2>\r\n                <div className=\"space-y-6\">\r\n                  {playlist && playlist.songs.length > 0 ? (\r\n                    playlist.songs.map((song) => (\r\n                      <div\r\n                        key={song.id}\r\n                        className=\"bg-gray-700 rounded-lg p-4 flex items-center justify-between hover:bg-gray-600 transition-all duration-300 transform hover:scale-100\"\r\n                      >\r\n                        <div className=\"flex items-center space-x-4\">\r\n                        <img\r\n                              className=\"w-20 h-20  object-cover rounded-md shadow-md\"\r\n                              src={song.song_cover_url.startsWith(\"http\") ? song.song_cover_url : `${song.song_cover_url}`}\r\n                              alt=\"Song cover\"\r\n                            />\r\n                          <div className=\"text-white\">\r\n                            <h3 className=\"text-xl font-semibold cursor-pointer\" onClick={() => handleClick(song.id)}>{song?.title}</h3>\r\n                            <p className=\"text-sm text-gray-500\">{song.artist?.name}</p>\r\n                            <p className=\"text-sm text-gray-500\">{song.genre} | {song.duration}</p>\r\n                          </div>\r\n                        </div>\r\n                        <div className='cursor-pointer hover:text-red-600'>\r\n                          <FaTrash onClick={() => deleteSongToPlaylist(playlist.id, song.id)} size={10}/>\r\n                        </div>\r\n                      </div>\r\n                    ))\r\n                  ):(\r\n                    <div className=\"text-white text-center\">No songs found in this playlist</div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          ):(\r\n            <div className=\"text-white text-center\">No playlists found</div>\r\n          )}\r\n        </div>\r\n        {/* style={{ background: `linear-gradient(to right, ${ftBgColor}, ${sdBgColor})` }} */}\r\n        <div className=\"audio-controls bg-slate-700 text-white mt-6 p-4 rounded-md flex flex-col justify-end\">\r\n          <div className=\"mt-4 text-blue-600 font-semibold\">\r\n              <h3>{currentSong?.title} - {currentSong?.artist?.name}</h3>\r\n            </div>\r\n            <audio\r\n              ref={audioRef}\r\n              src={`http://localhost:8000${currentSong?.audio}`}\r\n              onEnded={handleNext}\r\n            />\r\n            <div className=\"flex justify-between items-center\">\r\n              <button onClick={handlePrevious} className=\"p-2 bg-gray-700 rounded-lg hover:bg-gray-600\">\r\n                <TbPlayerTrackPrevFilled size={25} />\r\n              </button>\r\n              <button onClick={handlePlayPause} className=\"p-4 bg-gray-700 rounded-full hover:bg-gray-600\">\r\n                {isPlaying ? <FaPause size={25} /> : <FaPlay size={25} />}\r\n              </button>\r\n              <button onClick={handleNext} className=\"p-2 bg-gray-700 rounded-lg hover:bg-gray-600\">\r\n                <TbPlayerTrackNextFilled size={25} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n"],"names":["Playlist","_currentSong$artist","playlists","setPlaylists","useState","error","setError","currentPlaylistIndex","setCurrentPlaylistIndex","currentSongIndex","setCurrentSongIndex","isPlaying","setIsPlaying","audioRef","useRef","ftBgColor","setFtBgColor","getRandomColor","sdBgColor","setSdBgColor","navigate","useNavigate","color","i","Math","floor","random","useEffect","async","token","sessionStorage","getItem","response","axios","get","apiUrl","headers","Authorization","concat","data","Navigate","getPlaylist","current","play","pause","handleNext","nextIndex","songs","length","_jsxs","children","message","_jsx","Loading","currentPlaylist","currentSong","className","map","playlist","style","background","FaTrash","onClick","delete","playlistId","alert","deletePlaylist","id","size","FaArrowLeft","name","song","_song$artist","src","song_cover_url","startsWith","alt","handleClick","songId","title","artist","genre","duration","prevPlaylists","_objectSpread","filter","deleteSongToPlaylist","ref","audio","onEnded","handlePrevious","prevIndex","TbPlayerTrackPrevFilled","handlePlayPause","FaPause","FaPlay","TbPlayerTrackNextFilled"],"sourceRoot":""}