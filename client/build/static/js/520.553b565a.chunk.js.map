{"version":3,"file":"static/js/520.553b565a.chunk.js","mappings":"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","sources":["components/Song/AllSongs.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TbPlayerTrackPrevFilled, TbPlayerTrackNextFilled } from \"react-icons/tb\";\r\nimport { FaPlay, FaPause} from \"react-icons/fa\";\r\nimport { apiUrl } from '../../services/api';\r\nimport Loading from '../../layouts/Loading';\r\nimport { Navigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function AllSongs() {\r\n    const [songs, setSongs] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [audioPlayer, setAudioPlayer] = useState(null);\r\n    const [currentSongIndex, setCurrentSongIndex] = useState(0);\r\n    const [ftBgColor, setFtBgColor] = useState(getRandomColor());\r\n    const [sdBgColor, setSdBgColor] = useState(getRandomColor());\r\n\r\n    useEffect(() => {\r\n        const allSongs = async () => {\r\n            const token = sessionStorage.getItem('token');\r\n            if (!token) {\r\n                Navigate('/login');\r\n                return;\r\n            }\r\n            try {\r\n                const response = await axios.get(apiUrl+\"/audio_files/\",{\r\n                    headers:{\r\n                        Authorization:`Token ${token}`\r\n                    }\r\n                });\r\n                setSongs(response.data);\r\n                console.log(response.data)\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setError(error.message);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        allSongs();\r\n    }, []);\r\n\r\n    function getRandomColor(){\r\n        var letters = \"ABCDEF0123456789\";\r\n        var color = \"#\";\r\n        for (var i = 0; i < 6; i++) {\r\n          color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n      }\r\n\r\n    const playPauseSong = () => {\r\n        if (isPlaying) {\r\n            audioPlayer.pause();\r\n        } else {\r\n            audioPlayer.play();\r\n        }\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n\r\n    const nextSong = () => {\r\n        const newIndex =\r\n            currentSongIndex === songs.length - 1\r\n                ? 0\r\n                : currentSongIndex + 1;\r\n        setCurrentSongIndex(newIndex);\r\n        setFtBgColor(getRandomColor());\r\n        setSdBgColor(getRandomColor());\r\n        setIsPlaying(!isPlaying)\r\n    };\r\n\r\n    const previousSong = () => {\r\n        const newIndex =\r\n            currentSongIndex === 0\r\n                ? songs.length - 1\r\n                : currentSongIndex - 1;\r\n        setCurrentSongIndex(newIndex);\r\n        setFtBgColor(getRandomColor());\r\n        setSdBgColor(getRandomColor());\r\n    };\r\n\r\n\r\n    if (loading) return <div><Loading/></div>;\r\n    if (error) return <div>Error: {error}</div>;\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center bg-gradient-to-r from-blue-400 to-purple-400 pt-2 pb-24\" >\r\n            <div className=\"w-full sm:w-3/4 md:w-2/3 lg:w-1/2 xl:w-1/3 p-2 mt-8 rounded-xl shadow-xl flex flex-col items-center space-y-4\" style={{ background: `linear-gradient(to right, ${ftBgColor}, ${sdBgColor})` }}>\r\n                <div className=\"w-full mb-2 flex justify-center\">\r\n                    <img\r\n                        className=\"w-full max-w-xs h-auto object-cover rounded-lg shadow-md\"\r\n                        src={songs[currentSongIndex]?.song_cover_url}\r\n                        alt=\"Song cover\"\r\n                    />\r\n                </div>\r\n                <div className=\"text-center text-fuchsia-600 text-xl font-semibold\">\r\n                    <h2>{songs[currentSongIndex]?.title}</h2>\r\n                </div>\r\n                <div className=\"w-full flex flex-col items-center space-y-4\">\r\n                    <audio\r\n                        ref={(audio) => setAudioPlayer(audio)}\r\n                        controls\r\n                        className=\"w-full rounded-lg p-2\"\r\n                        src={`http://localhost:8000${songs[currentSongIndex]?.audio}`}\r\n                    />\r\n                    <div className=\"flex justify-center space-x-10 mt-4\">\r\n                        <button\r\n                            onClick={previousSong}\r\n                            className=\"bg-blue-600 text-white p-4 rounded-full shadow-lg hover:bg-blue-700 transition duration-300\"\r\n                        >\r\n                            <TbPlayerTrackPrevFilled size={24} />\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={playPauseSong}\r\n                            className=\"bg-blue-600 text-white p-4 rounded-full shadow-lg hover:bg-blue-700 transition duration-300\"\r\n                        >\r\n                            {isPlaying ? <FaPause size={24} /> : <FaPlay size={24} />}\r\n                        </button>\r\n                        <button\r\n                            onClick={nextSong}\r\n                            className=\"bg-blue-600 text-white p-4 rounded-full shadow-lg hover:bg-blue-700 transition duration-300\"\r\n                        >\r\n                            <TbPlayerTrackNextFilled size={24} />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n"],"names":["AllSongs","_songs$currentSongInd","_songs$currentSongInd2","_songs$currentSongInd3","songs","setSongs","useState","loading","setLoading","error","setError","isPlaying","setIsPlaying","audioPlayer","setAudioPlayer","currentSongIndex","setCurrentSongIndex","ftBgColor","setFtBgColor","getRandomColor","sdBgColor","setSdBgColor","color","i","Math","floor","random","useEffect","async","token","sessionStorage","getItem","response","axios","get","apiUrl","headers","Authorization","concat","data","console","log","message","Navigate","allSongs","_jsx","children","Loading","_jsxs","className","style","background","src","song_cover_url","alt","title","ref","audio","controls","onClick","previousSong","newIndex","length","TbPlayerTrackPrevFilled","size","playPauseSong","pause","play","FaPause","FaPlay","nextSong","TbPlayerTrackNextFilled"],"sourceRoot":""}